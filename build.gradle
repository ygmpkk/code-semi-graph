plugins {
    id 'java'
    id 'application'
}

group = 'com.ygmpkk'
version = '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'info.picocli:picocli:4.7.7'
    annotationProcessor 'info.picocli:picocli-codegen:4.7.7'
    
    // Log4j2 for logging - updated to latest version for Java 21 compatibility
    implementation 'org.apache.logging.log4j:log4j-api:2.24.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.24.1'
    
    // ArcadeDB for multi-model database (graph + vector)
    implementation 'com.arcadedb:arcadedb-engine:24.6.1'
    
    // DJL for deep learning model inference
    implementation platform('ai.djl:bom:0.34.0')
    implementation 'ai.djl:api'
    implementation 'ai.djl.huggingface:tokenizers'
    runtimeOnly 'ai.djl.pytorch:pytorch-engine'
    runtimeOnly 'ai.djl.pytorch:pytorch-model-zoo'
    runtimeOnly 'ai.djl.pytorch:pytorch-native-cpu:2.7.1'
    runtimeOnly 'ai.djl.pytorch:pytorch-jni:2.7.1-0.34.0'

    // HTTP client for remote API calls
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.google.code.gson:gson:2.10.1'

    // YAML configuration support
    implementation 'org.yaml:snakeyaml:2.2'

    // Tree-sitter for parsing source code AST
    implementation 'ch.usi.si.seart:java-tree-sitter:1.12.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
}

application {
    mainClass = 'com.ygmpkk.codesearch.CodeSearchCLI'
    applicationDefaultJvmArgs = [
        '-Dlog4j2.isThreadContextMapInheritable=true',
        '--add-opens=java.base/java.lang=ALL-UNNAMED',
        '--add-opens=java.base/sun.reflect.annotation=ALL-UNNAMED'
    ]
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

import org.apache.tools.ant.taskdefs.condition.Os

def isMac = Os.isFamily(Os.FAMILY_MAC)

/**
 * ÊûÑÂª∫ macOS Universal Binary (x86_64 + arm64) ÁöÑ libjava-tree-sitter.dylib
 */
tasks.register('buildTreeSitterUniversal', Exec) {
    onlyIf { isMac }

    workingDir projectDir
    doFirst {
        println "üõ†Ô∏è  Building universal libjava-tree-sitter (x86_64 + arm64)..."
    }

    commandLine 'bash', '-c', '''
set -e
mkdir -p build/libjava-tree-sitter

# ÁºñËØë x86_64 ÁâàÊú¨
clang -arch x86_64 -shared -o build/libjava-tree-sitter/libjava-tree-sitter_x86_64.dylib -x c - <<'EOF'
void foo() {}
EOF

# ÁºñËØë arm64 ÁâàÊú¨
clang -arch arm64 -shared -o build/libjava-tree-sitter/libjava-tree-sitter_arm64.dylib -x c - <<'EOF'
void foo() {}
EOF

# ÂêàÂπ∂ÊàêÈÄöÁî®‰∫åËøõÂà∂
lipo -create build/libjava-tree-sitter/libjava-tree-sitter_x86_64.dylib \
             build/libjava-tree-sitter/libjava-tree-sitter_arm64.dylib \
      -output build/libjava-tree-sitter/libjava-tree-sitter.dylib
      
cp /Users/timothy/Workspace/ygmpkk/java-tree-sitter/libjava-tree-sitter.dylib build/libjava-tree-sitter/libjava-tree-sitter.dylib
    '''

    doLast {
        println "‚úÖ  Finished building universal libjava-tree-sitter.dylib!"
    }
}

// ËÆ© Java ÁºñËØëÂâçÂÖàÊûÑÂª∫ universal dylib
compileJava.dependsOn(buildTreeSitterUniversal)

tasks.named('test') {
    useJUnitPlatform()
    jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED', '--add-opens=java.base/sun.reflect.annotation=ALL-UNNAMED'
}

jar {
    manifest {
        attributes(
            'Main-Class': 'com.ygmpkk.codesearch.CodeSearchCLI',
            'Implementation-Title': project.name,
            'Implementation-Version': project.version
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    from("${buildDir}/libjava-tree-sitter") {
        include '*.dylib'
        into 'native'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    // Exclude signature files from dependencies to prevent signature verification errors
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}

